//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets017A57BAEE1EEA792F291BEAD27BF9673CAE61C13E0351C5635CF792209399C6))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// Тип содержит представления для наборов EntitySets и AssociationSets, созданные во время разработки.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets017A57BAEE1EEA792F291BEAD27BF9673CAE61C13E0351C5635CF792209399C6 : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// Конструктор хранит представления для экстентов и значения хэша, созданные на основе замыканий и представлений метаданных и сопоставлений.
        /// </Summary>
        public ViewsForBaseEntitySets017A57BAEE1EEA792F291BEAD27BF9673CAE61C13E0351C5635CF792209399C6()
        {
            this.EdmEntityContainerName = "EfObjectContextEdmgenEntities";
            this.StoreEntityContainerName = "OrmTestNorthwindEfObjectContextEdmgenStoreContainer";
            this.HashOverMappingClosure = "2864c2741e51211a85c0d7c6709c603c08f07cf5ffeed1a4cb9707fcb3d3a322";
            this.HashOverAllExtentViews = "022252039d8550fe4e2c244a09410bea5a2ee193a26a91af38de3c04862958ae";
            this.ViewCount = 58;
        }
        
        /// <Summary>
        /// Метод возвращает представление для указанного индекса.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            if ((index == 12))
            {
                return GetView12();
            }
            if ((index == 13))
            {
                return GetView13();
            }
            if ((index == 14))
            {
                return GetView14();
            }
            if ((index == 15))
            {
                return GetView15();
            }
            if ((index == 16))
            {
                return GetView16();
            }
            if ((index == 17))
            {
                return GetView17();
            }
            if ((index == 18))
            {
                return GetView18();
            }
            if ((index == 19))
            {
                return GetView19();
            }
            if ((index == 20))
            {
                return GetView20();
            }
            if ((index == 21))
            {
                return GetView21();
            }
            if ((index == 22))
            {
                return GetView22();
            }
            if ((index == 23))
            {
                return GetView23();
            }
            if ((index == 24))
            {
                return GetView24();
            }
            if ((index == 25))
            {
                return GetView25();
            }
            if ((index == 26))
            {
                return GetView26();
            }
            if ((index == 27))
            {
                return GetView27();
            }
            if ((index == 28))
            {
                return GetView28();
            }
            if ((index == 29))
            {
                return GetView29();
            }
            if ((index == 30))
            {
                return GetView30();
            }
            if ((index == 31))
            {
                return GetView31();
            }
            if ((index == 32))
            {
                return GetView32();
            }
            if ((index == 33))
            {
                return GetView33();
            }
            if ((index == 34))
            {
                return GetView34();
            }
            if ((index == 35))
            {
                return GetView35();
            }
            if ((index == 36))
            {
                return GetView36();
            }
            if ((index == 37))
            {
                return GetView37();
            }
            if ((index == 38))
            {
                return GetView38();
            }
            if ((index == 39))
            {
                return GetView39();
            }
            if ((index == 40))
            {
                return GetView40();
            }
            if ((index == 41))
            {
                return GetView41();
            }
            if ((index == 42))
            {
                return GetView42();
            }
            if ((index == 43))
            {
                return GetView43();
            }
            if ((index == 44))
            {
                return GetView44();
            }
            if ((index == 45))
            {
                return GetView45();
            }
            if ((index == 46))
            {
                return GetView46();
            }
            if ((index == 47))
            {
                return GetView47();
            }
            if ((index == 48))
            {
                return GetView48();
            }
            if ((index == 49))
            {
                return GetView49();
            }
            if ((index == 50))
            {
                return GetView50();
            }
            if ((index == 51))
            {
                return GetView51();
            }
            if ((index == 52))
            {
                return GetView52();
            }
            if ((index == 53))
            {
                return GetView53();
            }
            if ((index == 54))
            {
                return GetView54();
            }
            if ((index == 55))
            {
                return GetView55();
            }
            if ((index == 56))
            {
                return GetView56();
            }
            if ((index == 57))
            {
                return GetView57();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Categories", @"
    SELECT VALUE -- Constructing Categories
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Categories](T1.Categories_CategoryID, T1.Categories_CategoryName, T1.Categories_Description, T1.Categories_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Categories_CategoryID, 
            T.CategoryName AS Categories_CategoryName, 
            T.Description AS Categories_Description, 
            T.Picture AS Categories_Picture, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerDemographics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerDemographics", @"
    SELECT VALUE -- Constructing CustomerDemographics
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.CustomerDemographics](T1.CustomerDemographics_CustomerTypeID, T1.CustomerDemographics_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographics_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographics_CustomerDesc, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.CustomerDemographics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Customers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Customers", @"
    SELECT VALUE -- Constructing Customers
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Customers](T1.Customers_CustomerID, T1.Customers_CompanyName, T1.Customers_ContactName, T1.Customers_ContactTitle, T1.Customers_Address, T1.Customers_City, T1.Customers_Region, T1.Customers_PostalCode, T1.Customers_Country, T1.Customers_Phone, T1.Customers_Fax)
    FROM (
        SELECT 
            T.CustomerID AS Customers_CustomerID, 
            T.CompanyName AS Customers_CompanyName, 
            T.ContactName AS Customers_ContactName, 
            T.ContactTitle AS Customers_ContactTitle, 
            T.Address AS Customers_Address, 
            T.City AS Customers_City, 
            T.Region AS Customers_Region, 
            T.PostalCode AS Customers_PostalCode, 
            T.Country AS Customers_Country, 
            T.Phone AS Customers_Phone, 
            T.Fax AS Customers_Fax, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Customers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Employees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Employees", "\r\n    SELECT VALUE -- Constructing Employees\r\n        [OrmTestNorthwind.EfObjectC" +
                    "ontextEdmgen.Store.Employees](T1.Employees_EmployeeID, T1.Employees_LastName, T1" +
                    ".Employees_FirstName, T1.Employees_Title, T1.Employees_TitleOfCourtesy, T1.Emplo" +
                    "yees_BirthDate, T1.Employees_HireDate, T1.Employees_Address, T1.Employees_City, " +
                    "T1.Employees_Region, T1.Employees_PostalCode, T1.Employees_Country, T1.Employees" +
                    "_HomePhone, T1.Employees_Extension, T1.Employees_Photo, T1.Employees_Notes, T1.E" +
                    "mployees_ReportsTo, T1.Employees_PhotoPath)\r\n    FROM (\r\n        SELECT \r\n      " +
                    "      T.EmployeeID AS Employees_EmployeeID, \r\n            T.LastName AS Employee" +
                    "s_LastName, \r\n            T.FirstName AS Employees_FirstName, \r\n            T.Ti" +
                    "tle AS Employees_Title, \r\n            T.TitleOfCourtesy AS Employees_TitleOfCour" +
                    "tesy, \r\n            T.BirthDate AS Employees_BirthDate, \r\n            T.HireDate" +
                    " AS Employees_HireDate, \r\n            T.Address AS Employees_Address, \r\n        " +
                    "    T.City AS Employees_City, \r\n            T.Region AS Employees_Region, \r\n    " +
                    "        T.PostalCode AS Employees_PostalCode, \r\n            T.Country AS Employe" +
                    "es_Country, \r\n            T.HomePhone AS Employees_HomePhone, \r\n            T.Ex" +
                    "tension AS Employees_Extension, \r\n            T.Photo AS Employees_Photo, \r\n    " +
                    "        T.Notes AS Employees_Notes, \r\n            T.ReportsTo AS Employees_Repor" +
                    "tsTo, \r\n            T.PhotoPath AS Employees_PhotoPath, \r\n            True AS _f" +
                    "rom0\r\n        FROM EfObjectContextEdmgenEntities.Employees AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Details
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Details", @"
    SELECT VALUE -- Constructing Order Details
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Order Details](T1.[Order Details_OrderID], T1.[Order Details_ProductID], T1.[Order Details_UnitPrice], T1.[Order Details_Quantity], T1.[Order Details_Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order Details_OrderID], 
            T.ProductID AS [Order Details_ProductID], 
            T.UnitPrice AS [Order Details_UnitPrice], 
            T.Quantity AS [Order Details_Quantity], 
            T.Discount AS [Order Details_Discount], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Order_Details AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Orders", @"
    SELECT VALUE -- Constructing Orders
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Orders](T1.Orders_OrderID, T1.Orders_CustomerID, T1.Orders_EmployeeID, T1.Orders_OrderDate, T1.Orders_RequiredDate, T1.Orders_ShippedDate, T1.Orders_ShipVia, T1.Orders_Freight, T1.Orders_ShipName, T1.Orders_ShipAddress, T1.Orders_ShipCity, T1.Orders_ShipRegion, T1.Orders_ShipPostalCode, T1.Orders_ShipCountry)
    FROM (
        SELECT 
            T.OrderID AS Orders_OrderID, 
            T.CustomerID AS Orders_CustomerID, 
            T.EmployeeID AS Orders_EmployeeID, 
            T.OrderDate AS Orders_OrderDate, 
            T.RequiredDate AS Orders_RequiredDate, 
            T.ShippedDate AS Orders_ShippedDate, 
            T.ShipVia AS Orders_ShipVia, 
            T.Freight AS Orders_Freight, 
            T.ShipName AS Orders_ShipName, 
            T.ShipAddress AS Orders_ShipAddress, 
            T.ShipCity AS Orders_ShipCity, 
            T.ShipRegion AS Orders_ShipRegion, 
            T.ShipPostalCode AS Orders_ShipPostalCode, 
            T.ShipCountry AS Orders_ShipCountry, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products", @"
    SELECT VALUE -- Constructing Products
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Products](T1.Products_ProductID, T1.Products_ProductName, T1.Products_SupplierID, T1.Products_CategoryID, T1.Products_QuantityPerUnit, T1.Products_UnitPrice, T1.Products_UnitsInStock, T1.Products_UnitsOnOrder, T1.Products_ReorderLevel, T1.Products_Discontinued)
    FROM (
        SELECT 
            T.ProductID AS Products_ProductID, 
            T.ProductName AS Products_ProductName, 
            T.SupplierID AS Products_SupplierID, 
            T.CategoryID AS Products_CategoryID, 
            T.QuantityPerUnit AS Products_QuantityPerUnit, 
            T.UnitPrice AS Products_UnitPrice, 
            T.UnitsInStock AS Products_UnitsInStock, 
            T.UnitsOnOrder AS Products_UnitsOnOrder, 
            T.ReorderLevel AS Products_ReorderLevel, 
            T.Discontinued AS Products_Discontinued, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Products AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Region
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Region", @"
    SELECT VALUE -- Constructing Region
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Regions AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Shippers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Shippers", @"
    SELECT VALUE -- Constructing Shippers
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Shippers](T1.Shippers_ShipperID, T1.Shippers_CompanyName, T1.Shippers_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shippers_ShipperID, 
            T.CompanyName AS Shippers_CompanyName, 
            T.Phone AS Shippers_Phone, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Shippers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Suppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Suppliers", @"
    SELECT VALUE -- Constructing Suppliers
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Suppliers](T1.Suppliers_SupplierID, T1.Suppliers_CompanyName, T1.Suppliers_ContactName, T1.Suppliers_ContactTitle, T1.Suppliers_Address, T1.Suppliers_City, T1.Suppliers_Region, T1.Suppliers_PostalCode, T1.Suppliers_Country, T1.Suppliers_Phone, T1.Suppliers_Fax, T1.Suppliers_HomePage)
    FROM (
        SELECT 
            T.SupplierID AS Suppliers_SupplierID, 
            T.CompanyName AS Suppliers_CompanyName, 
            T.ContactName AS Suppliers_ContactName, 
            T.ContactTitle AS Suppliers_ContactTitle, 
            T.Address AS Suppliers_Address, 
            T.City AS Suppliers_City, 
            T.Region AS Suppliers_Region, 
            T.PostalCode AS Suppliers_PostalCode, 
            T.Country AS Suppliers_Country, 
            T.Phone AS Suppliers_Phone, 
            T.Fax AS Suppliers_Fax, 
            T.HomePage AS Suppliers_HomePage, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Suppliers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Territories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Territories", @"
    SELECT VALUE -- Constructing Territories
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Territories](T1.Territories_TerritoryID, T1.Territories_TerritoryDescription, T1.Territories_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territories_TerritoryID, 
            T.TerritoryDescription AS Territories_TerritoryDescription, 
            T.RegionID AS Territories_RegionID, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Territories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerCustomerDemo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerCustomerDemo", @"
    SELECT VALUE -- Constructing CustomerCustomerDemo
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.CustomerCustomerDemo](T1.CustomerCustomerDemo_CustomerID, T1.CustomerCustomerDemo_CustomerTypeID)
    FROM (
        SELECT 
            Key(T.Customers).CustomerID AS CustomerCustomerDemo_CustomerID, 
            Key(T.CustomerDemographics).CustomerTypeID AS CustomerCustomerDemo_CustomerTypeID, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.CustomerCustomerDemo AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.EmployeeTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView12()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.EmployeeTerritories", @"
    SELECT VALUE -- Constructing EmployeeTerritories
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.EmployeeTerritories](T1.EmployeeTerritories_EmployeeID, T1.EmployeeTerritories_TerritoryID)
    FROM (
        SELECT 
            Key(T.Employees).EmployeeID AS EmployeeTerritories_EmployeeID, 
            Key(T.Territories).TerritoryID AS EmployeeTerritories_TerritoryID, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.EmployeeTerritories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView13()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Categories", @"
    SELECT VALUE -- Constructing Categories
        [OrmTestNorthwind.EfObjectContextEdmgen.Category](T1.Category_CategoryID, T1.Category_CategoryName, T1.Category_Description, T1.Category_Picture)
    FROM (
        SELECT 
            T.CategoryID AS Category_CategoryID, 
            T.CategoryName AS Category_CategoryName, 
            T.Description AS Category_Description, 
            T.Picture AS Category_Picture, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.CustomerDemographics
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView14()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.CustomerDemographics", @"
    SELECT VALUE -- Constructing CustomerDemographics
        [OrmTestNorthwind.EfObjectContextEdmgen.CustomerDemographic](T1.CustomerDemographic_CustomerTypeID, T1.CustomerDemographic_CustomerDesc)
    FROM (
        SELECT 
            T.CustomerTypeID AS CustomerDemographic_CustomerTypeID, 
            T.CustomerDesc AS CustomerDemographic_CustomerDesc, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerDemographics AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Customers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView15()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Customers", @"
    SELECT VALUE -- Constructing Customers
        [OrmTestNorthwind.EfObjectContextEdmgen.Customer](T1.Customer_CustomerID, T1.Customer_CompanyName, T1.Customer_ContactName, T1.Customer_ContactTitle, T1.Customer_Address, T1.Customer_City, T1.Customer_Region, T1.Customer_PostalCode, T1.Customer_Country, T1.Customer_Phone, T1.Customer_Fax)
    FROM (
        SELECT 
            T.CustomerID AS Customer_CustomerID, 
            T.CompanyName AS Customer_CompanyName, 
            T.ContactName AS Customer_ContactName, 
            T.ContactTitle AS Customer_ContactTitle, 
            T.Address AS Customer_Address, 
            T.City AS Customer_City, 
            T.Region AS Customer_Region, 
            T.PostalCode AS Customer_PostalCode, 
            T.Country AS Customer_Country, 
            T.Phone AS Customer_Phone, 
            T.Fax AS Customer_Fax, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Customers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Employees
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView16()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Employees", @"
    SELECT VALUE -- Constructing Employees
        [OrmTestNorthwind.EfObjectContextEdmgen.Employee](T1.Employee_EmployeeID, T1.Employee_LastName, T1.Employee_FirstName, T1.Employee_Title, T1.Employee_TitleOfCourtesy, T1.Employee_BirthDate, T1.Employee_HireDate, T1.Employee_Address, T1.Employee_City, T1.Employee_Region, T1.Employee_PostalCode, T1.Employee_Country, T1.Employee_HomePhone, T1.Employee_Extension, T1.Employee_Photo, T1.Employee_Notes, T1.Employee_ReportsTo, T1.Employee_PhotoPath)
    FROM (
        SELECT 
            T.EmployeeID AS Employee_EmployeeID, 
            T.LastName AS Employee_LastName, 
            T.FirstName AS Employee_FirstName, 
            T.Title AS Employee_Title, 
            T.TitleOfCourtesy AS Employee_TitleOfCourtesy, 
            T.BirthDate AS Employee_BirthDate, 
            T.HireDate AS Employee_HireDate, 
            T.Address AS Employee_Address, 
            T.City AS Employee_City, 
            T.Region AS Employee_Region, 
            T.PostalCode AS Employee_PostalCode, 
            T.Country AS Employee_Country, 
            T.HomePhone AS Employee_HomePhone, 
            T.Extension AS Employee_Extension, 
            T.Photo AS Employee_Photo, 
            T.Notes AS Employee_Notes, 
            T.ReportsTo AS Employee_ReportsTo, 
            T.PhotoPath AS Employee_PhotoPath, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Employees AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Order_Details
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView17()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Order_Details", @"
    SELECT VALUE -- Constructing Order_Details
        [OrmTestNorthwind.EfObjectContextEdmgen.Order_Detail](T1.[Order_Detail.OrderID], T1.[Order_Detail.ProductID], T1.[Order_Detail.UnitPrice], T1.[Order_Detail.Quantity], T1.[Order_Detail.Discount])
    FROM (
        SELECT 
            T.OrderID AS [Order_Detail.OrderID], 
            T.ProductID AS [Order_Detail.ProductID], 
            T.UnitPrice AS [Order_Detail.UnitPrice], 
            T.Quantity AS [Order_Detail.Quantity], 
            T.Discount AS [Order_Detail.Discount], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Order Details] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Orders
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView18()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Orders", @"
    SELECT VALUE -- Constructing Orders
        [OrmTestNorthwind.EfObjectContextEdmgen.Order](T1.Order_OrderID, T1.Order_CustomerID, T1.Order_EmployeeID, T1.Order_OrderDate, T1.Order_RequiredDate, T1.Order_ShippedDate, T1.Order_ShipVia, T1.Order_Freight, T1.Order_ShipName, T1.Order_ShipAddress, T1.Order_ShipCity, T1.Order_ShipRegion, T1.Order_ShipPostalCode, T1.Order_ShipCountry)
    FROM (
        SELECT 
            T.OrderID AS Order_OrderID, 
            T.CustomerID AS Order_CustomerID, 
            T.EmployeeID AS Order_EmployeeID, 
            T.OrderDate AS Order_OrderDate, 
            T.RequiredDate AS Order_RequiredDate, 
            T.ShippedDate AS Order_ShippedDate, 
            T.ShipVia AS Order_ShipVia, 
            T.Freight AS Order_Freight, 
            T.ShipName AS Order_ShipName, 
            T.ShipAddress AS Order_ShipAddress, 
            T.ShipCity AS Order_ShipCity, 
            T.ShipRegion AS Order_ShipRegion, 
            T.ShipPostalCode AS Order_ShipPostalCode, 
            T.ShipCountry AS Order_ShipCountry, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Orders AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView19()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Products", @"
    SELECT VALUE -- Constructing Products
        [OrmTestNorthwind.EfObjectContextEdmgen.Product](T1.Product_ProductID, T1.Product_ProductName, T1.Product_SupplierID, T1.Product_CategoryID, T1.Product_QuantityPerUnit, T1.Product_UnitPrice, T1.Product_UnitsInStock, T1.Product_UnitsOnOrder, T1.Product_ReorderLevel, T1.Product_Discontinued)
    FROM (
        SELECT 
            T.ProductID AS Product_ProductID, 
            T.ProductName AS Product_ProductName, 
            T.SupplierID AS Product_SupplierID, 
            T.CategoryID AS Product_CategoryID, 
            T.QuantityPerUnit AS Product_QuantityPerUnit, 
            T.UnitPrice AS Product_UnitPrice, 
            T.UnitsInStock AS Product_UnitsInStock, 
            T.UnitsOnOrder AS Product_UnitsOnOrder, 
            T.ReorderLevel AS Product_ReorderLevel, 
            T.Discontinued AS Product_Discontinued, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Regions
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView20()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Regions", @"
    SELECT VALUE -- Constructing Regions
        [OrmTestNorthwind.EfObjectContextEdmgen.Region](T1.Region_RegionID, T1.Region_RegionDescription)
    FROM (
        SELECT 
            T.RegionID AS Region_RegionID, 
            T.RegionDescription AS Region_RegionDescription, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Region AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Shippers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView21()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Shippers", @"
    SELECT VALUE -- Constructing Shippers
        [OrmTestNorthwind.EfObjectContextEdmgen.Shipper](T1.Shipper_ShipperID, T1.Shipper_CompanyName, T1.Shipper_Phone)
    FROM (
        SELECT 
            T.ShipperID AS Shipper_ShipperID, 
            T.CompanyName AS Shipper_CompanyName, 
            T.Phone AS Shipper_Phone, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Shippers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Suppliers
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView22()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Suppliers", @"
    SELECT VALUE -- Constructing Suppliers
        [OrmTestNorthwind.EfObjectContextEdmgen.Supplier](T1.Supplier_SupplierID, T1.Supplier_CompanyName, T1.Supplier_ContactName, T1.Supplier_ContactTitle, T1.Supplier_Address, T1.Supplier_City, T1.Supplier_Region, T1.Supplier_PostalCode, T1.Supplier_Country, T1.Supplier_Phone, T1.Supplier_Fax, T1.Supplier_HomePage)
    FROM (
        SELECT 
            T.SupplierID AS Supplier_SupplierID, 
            T.CompanyName AS Supplier_CompanyName, 
            T.ContactName AS Supplier_ContactName, 
            T.ContactTitle AS Supplier_ContactTitle, 
            T.Address AS Supplier_Address, 
            T.City AS Supplier_City, 
            T.Region AS Supplier_Region, 
            T.PostalCode AS Supplier_PostalCode, 
            T.Country AS Supplier_Country, 
            T.Phone AS Supplier_Phone, 
            T.Fax AS Supplier_Fax, 
            T.HomePage AS Supplier_HomePage, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Suppliers AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Territories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView23()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Territories", @"
    SELECT VALUE -- Constructing Territories
        [OrmTestNorthwind.EfObjectContextEdmgen.Territory](T1.Territory_TerritoryID, T1.Territory_TerritoryDescription, T1.Territory_RegionID)
    FROM (
        SELECT 
            T.TerritoryID AS Territory_TerritoryID, 
            T.TerritoryDescription AS Territory_TerritoryDescription, 
            T.RegionID AS Territory_RegionID, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Territories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.CustomerCustomerDemo
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView24()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.CustomerCustomerDemo", @"
    SELECT VALUE -- Constructing CustomerCustomerDemo
        [OrmTestNorthwind.EfObjectContextEdmgen.CustomerCustomerDemo](T3.CustomerCustomerDemo_CustomerDemographics, T3.CustomerCustomerDemo_Customers)
    FROM (
        SELECT -- Constructing CustomerDemographics
            CreateRef(EfObjectContextEdmgenEntities.CustomerDemographics, row(T2.CustomerCustomerDemo_CustomerDemographics_CustomerTypeID), [OrmTestNorthwind.EfObjectContextEdmgen.CustomerDemographic]) AS CustomerCustomerDemo_CustomerDemographics, 
            T2.CustomerCustomerDemo_Customers
        FROM (
            SELECT -- Constructing Customers
                T1.CustomerCustomerDemo_CustomerDemographics_CustomerTypeID, 
                CreateRef(EfObjectContextEdmgenEntities.Customers, row(T1.CustomerCustomerDemo_Customers_CustomerID), [OrmTestNorthwind.EfObjectContextEdmgen.Customer]) AS CustomerCustomerDemo_Customers
            FROM (
                SELECT 
                    T.CustomerTypeID AS CustomerCustomerDemo_CustomerDemographics_CustomerTypeID, 
                    T.CustomerID AS CustomerCustomerDemo_Customers_CustomerID, 
                    True AS _from0
                FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.CustomerCustomerDemo AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.EmployeeTerritories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView25()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.EmployeeTerritories", @"
    SELECT VALUE -- Constructing EmployeeTerritories
        [OrmTestNorthwind.EfObjectContextEdmgen.EmployeeTerritories](T3.EmployeeTerritories_Employees, T3.EmployeeTerritories_Territories)
    FROM (
        SELECT -- Constructing Employees
            CreateRef(EfObjectContextEdmgenEntities.Employees, row(T2.EmployeeTerritories_Employees_EmployeeID), [OrmTestNorthwind.EfObjectContextEdmgen.Employee]) AS EmployeeTerritories_Employees, 
            T2.EmployeeTerritories_Territories
        FROM (
            SELECT -- Constructing Territories
                T1.EmployeeTerritories_Employees_EmployeeID, 
                CreateRef(EfObjectContextEdmgenEntities.Territories, row(T1.EmployeeTerritories_Territories_TerritoryID), [OrmTestNorthwind.EfObjectContextEdmgen.Territory]) AS EmployeeTerritories_Territories
            FROM (
                SELECT 
                    T.EmployeeID AS EmployeeTerritories_Employees_EmployeeID, 
                    T.TerritoryID AS EmployeeTerritories_Territories_TerritoryID, 
                    True AS _from0
                FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.EmployeeTerritories AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.sysdiagrams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView26()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.sysdiagrams", @"
    SELECT VALUE -- Constructing sysdiagrams
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.sysdiagrams](T1.sysdiagrams_name, T1.[sysdiagrams.principal_id], T1.[sysdiagrams.diagram_id], T1.sysdiagrams_version, T1.sysdiagrams_definition)
    FROM (
        SELECT 
            T.name AS sysdiagrams_name, 
            T.principal_id AS [sysdiagrams.principal_id], 
            T.diagram_id AS [sysdiagrams.diagram_id], 
            T.version AS sysdiagrams_version, 
            T.definition AS sysdiagrams_definition, 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.sysdiagrams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.sysdiagrams
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView27()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.sysdiagrams", @"
    SELECT VALUE -- Constructing sysdiagrams
        [OrmTestNorthwind.EfObjectContextEdmgen.sysdiagram](T1.sysdiagram_name, T1.[sysdiagram.principal_id], T1.[sysdiagram.diagram_id], T1.sysdiagram_version, T1.sysdiagram_definition)
    FROM (
        SELECT 
            T.name AS sysdiagram_name, 
            T.principal_id AS [sysdiagram.principal_id], 
            T.diagram_id AS [sysdiagram.diagram_id], 
            T.version AS sysdiagram_version, 
            T.definition AS sysdiagram_definition, 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.sysdiagrams AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Alphabetical list of products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView28()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Alphabetical list of products" +
                    "", "\r\n    SELECT VALUE -- Constructing Alphabetical list of products\r\n        [OrmTes" +
                    "tNorthwind.EfObjectContextEdmgen.Store.Alphabetical list of products](T1.[Alphab" +
                    "etical list of products_ProductID], T1.[Alphabetical list of products_ProductNam" +
                    "e], T1.[Alphabetical list of products_SupplierID], T1.[Alphabetical list of prod" +
                    "ucts_CategoryID], T1.[Alphabetical list of products_QuantityPerUnit], T1.[Alphab" +
                    "etical list of products_UnitPrice], T1.[Alphabetical list of products_UnitsInSto" +
                    "ck], T1.[Alphabetical list of products_UnitsOnOrder], T1.[Alphabetical list of p" +
                    "roducts_ReorderLevel], T1.[Alphabetical list of products_Discontinued], T1.[Alph" +
                    "abetical list of products_CategoryName])\r\n    FROM (\r\n        SELECT \r\n         " +
                    "   T.ProductID AS [Alphabetical list of products_ProductID], \r\n            T.Pro" +
                    "ductName AS [Alphabetical list of products_ProductName], \r\n            T.Supplie" +
                    "rID AS [Alphabetical list of products_SupplierID], \r\n            T.CategoryID AS" +
                    " [Alphabetical list of products_CategoryID], \r\n            T.QuantityPerUnit AS " +
                    "[Alphabetical list of products_QuantityPerUnit], \r\n            T.UnitPrice AS [A" +
                    "lphabetical list of products_UnitPrice], \r\n            T.UnitsInStock AS [Alphab" +
                    "etical list of products_UnitsInStock], \r\n            T.UnitsOnOrder AS [Alphabet" +
                    "ical list of products_UnitsOnOrder], \r\n            T.ReorderLevel AS [Alphabetic" +
                    "al list of products_ReorderLevel], \r\n            T.Discontinued AS [Alphabetical" +
                    " list of products_Discontinued], \r\n            T.CategoryName AS [Alphabetical l" +
                    "ist of products_CategoryName], \r\n            True AS _from0\r\n        FROM EfObje" +
                    "ctContextEdmgenEntities.Alphabetical_list_of_products AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Alphabetical_list_of_products
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView29()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Alphabetical_list_of_products", "\r\n    SELECT VALUE -- Constructing Alphabetical_list_of_products\r\n        [OrmTes" +
                    "tNorthwind.EfObjectContextEdmgen.Alphabetical_list_of_product](T1.[Alphabetical_" +
                    "list_of_product.ProductID], T1.[Alphabetical_list_of_product.ProductName], T1.[A" +
                    "lphabetical_list_of_product.SupplierID], T1.[Alphabetical_list_of_product.Catego" +
                    "ryID], T1.[Alphabetical_list_of_product.QuantityPerUnit], T1.[Alphabetical_list_" +
                    "of_product.UnitPrice], T1.[Alphabetical_list_of_product.UnitsInStock], T1.[Alpha" +
                    "betical_list_of_product.UnitsOnOrder], T1.[Alphabetical_list_of_product.ReorderL" +
                    "evel], T1.[Alphabetical_list_of_product.Discontinued], T1.[Alphabetical_list_of_" +
                    "product.CategoryName])\r\n    FROM (\r\n        SELECT \r\n            T.ProductID AS " +
                    "[Alphabetical_list_of_product.ProductID], \r\n            T.ProductName AS [Alphab" +
                    "etical_list_of_product.ProductName], \r\n            T.SupplierID AS [Alphabetical" +
                    "_list_of_product.SupplierID], \r\n            T.CategoryID AS [Alphabetical_list_o" +
                    "f_product.CategoryID], \r\n            T.QuantityPerUnit AS [Alphabetical_list_of_" +
                    "product.QuantityPerUnit], \r\n            T.UnitPrice AS [Alphabetical_list_of_pro" +
                    "duct.UnitPrice], \r\n            T.UnitsInStock AS [Alphabetical_list_of_product.U" +
                    "nitsInStock], \r\n            T.UnitsOnOrder AS [Alphabetical_list_of_product.Unit" +
                    "sOnOrder], \r\n            T.ReorderLevel AS [Alphabetical_list_of_product.Reorder" +
                    "Level], \r\n            T.Discontinued AS [Alphabetical_list_of_product.Discontinu" +
                    "ed], \r\n            T.CategoryName AS [Alphabetical_list_of_product.CategoryName]" +
                    ", \r\n            True AS _from0\r\n        FROM OrmTestNorthwindEfObjectContextEdmg" +
                    "enStoreContainer.[Alphabetical list of products] AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Category Sales for 1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView30()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Category Sales for 1997", @"
    SELECT VALUE -- Constructing Category Sales for 1997
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Category Sales for 1997](T1.[Category Sales for 1997_CategoryName], T1.[Category Sales for 1997_CategorySales])
    FROM (
        SELECT 
            T.CategoryName AS [Category Sales for 1997_CategoryName], 
            T.CategorySales AS [Category Sales for 1997_CategorySales], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Category_Sales_for_1997 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Category_Sales_for_1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView31()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Category_Sales_for_1997", @"
    SELECT VALUE -- Constructing Category_Sales_for_1997
        [OrmTestNorthwind.EfObjectContextEdmgen.Category_Sales_for_1997](T1.[Category_Sales_for_1997.CategoryName], T1.[Category_Sales_for_1997.CategorySales])
    FROM (
        SELECT 
            T.CategoryName AS [Category_Sales_for_1997.CategoryName], 
            T.CategorySales AS [Category_Sales_for_1997.CategorySales], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Category Sales for 1997] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Current Product List
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView32()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Current Product List", @"
    SELECT VALUE -- Constructing Current Product List
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Current Product List](T1.[Current Product List_ProductID], T1.[Current Product List_ProductName])
    FROM (
        SELECT 
            T.ProductID AS [Current Product List_ProductID], 
            T.ProductName AS [Current Product List_ProductName], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Current_Product_Lists AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Current_Product_Lists
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView33()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Current_Product_Lists", @"
    SELECT VALUE -- Constructing Current_Product_Lists
        [OrmTestNorthwind.EfObjectContextEdmgen.Current_Product_List](T1.[Current_Product_List.ProductID], T1.[Current_Product_List.ProductName])
    FROM (
        SELECT 
            T.ProductID AS [Current_Product_List.ProductID], 
            T.ProductName AS [Current_Product_List.ProductName], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Current Product List] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Customer and Suppliers by City
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView34()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Customer and Suppliers by Cit" +
                    "y", @"
    SELECT VALUE -- Constructing Customer and Suppliers by City
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Customer and Suppliers by City](T1.[Customer and Suppliers by City_City], T1.[Customer and Suppliers by City_CompanyName], T1.[Customer and Suppliers by City_ContactName], T1.[Customer and Suppliers by City_Relationship])
    FROM (
        SELECT 
            T.City AS [Customer and Suppliers by City_City], 
            T.CompanyName AS [Customer and Suppliers by City_CompanyName], 
            T.ContactName AS [Customer and Suppliers by City_ContactName], 
            T.[Relationship] AS [Customer and Suppliers by City_Relationship], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Customer_and_Suppliers_by_Cities AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Customer_and_Suppliers_by_Cities
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView35()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Customer_and_Suppliers_by_Cities", @"
    SELECT VALUE -- Constructing Customer_and_Suppliers_by_Cities
        [OrmTestNorthwind.EfObjectContextEdmgen.Customer_and_Suppliers_by_City](T1.[Customer_and_Suppliers_by_City.City], T1.[Customer_and_Suppliers_by_City.CompanyName], T1.[Customer_and_Suppliers_by_City.ContactName], T1.[Customer_and_Suppliers_by_City.Relationship])
    FROM (
        SELECT 
            T.City AS [Customer_and_Suppliers_by_City.City], 
            T.CompanyName AS [Customer_and_Suppliers_by_City.CompanyName], 
            T.ContactName AS [Customer_and_Suppliers_by_City.ContactName], 
            T.[Relationship] AS [Customer_and_Suppliers_by_City.Relationship], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Customer and Suppliers by City] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView36()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2138);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [OrmTestNorthwind.EfObjectC");
            viewString.Append("ontextEdmgen.Store.Invoices](T1.Invoices_ShipName, T1.Invoices_ShipAddress, T1.I");
            viewString.Append("nvoices_ShipCity, T1.Invoices_ShipRegion, T1.Invoices_ShipPostalCode, T1.Invoice");
            viewString.Append("s_ShipCountry, T1.Invoices_CustomerID, T1.Invoices_CustomerName, T1.Invoices_Add");
            viewString.Append("ress, T1.Invoices_City, T1.Invoices_Region, T1.Invoices_PostalCode, T1.Invoices_");
            viewString.Append("Country, T1.Invoices_Salesperson, T1.Invoices_OrderID, T1.Invoices_OrderDate, T1");
            viewString.Append(".Invoices_RequiredDate, T1.Invoices_ShippedDate, T1.Invoices_ShipperName, T1.Inv");
            viewString.Append("oices_ProductID, T1.Invoices_ProductName, T1.Invoices_UnitPrice, T1.Invoices_Qua");
            viewString.Append("ntity, T1.Invoices_Discount, T1.Invoices_ExtendedPrice, T1.Invoices_Freight)\r\n  ");
            viewString.Append("  FROM (\r\n        SELECT \r\n            T.ShipName AS Invoices_ShipName, \r\n      ");
            viewString.Append("      T.ShipAddress AS Invoices_ShipAddress, \r\n            T.ShipCity AS Invoice");
            viewString.Append("s_ShipCity, \r\n            T.ShipRegion AS Invoices_ShipRegion, \r\n            T.S");
            viewString.Append("hipPostalCode AS Invoices_ShipPostalCode, \r\n            T.ShipCountry AS Invoice");
            viewString.Append("s_ShipCountry, \r\n            T.CustomerID AS Invoices_CustomerID, \r\n            ");
            viewString.Append("T.CustomerName AS Invoices_CustomerName, \r\n            T.Address AS Invoices_Add");
            viewString.Append("ress, \r\n            T.City AS Invoices_City, \r\n            T.Region AS Invoices_");
            viewString.Append("Region, \r\n            T.PostalCode AS Invoices_PostalCode, \r\n            T.Count");
            viewString.Append("ry AS Invoices_Country, \r\n            T.Salesperson AS Invoices_Salesperson, \r\n ");
            viewString.Append("           T.OrderID AS Invoices_OrderID, \r\n            T.OrderDate AS Invoices_");
            viewString.Append("OrderDate, \r\n            T.RequiredDate AS Invoices_RequiredDate, \r\n            ");
            viewString.Append("T.ShippedDate AS Invoices_ShippedDate, \r\n            T.ShipperName AS Invoices_S");
            viewString.Append("hipperName, \r\n            T.ProductID AS Invoices_ProductID, \r\n            T.Pro");
            viewString.Append("ductName AS Invoices_ProductName, \r\n            T.UnitPrice AS Invoices_UnitPric");
            viewString.Append("e, \r\n            T.Quantity AS Invoices_Quantity, \r\n            T.Discount AS In");
            viewString.Append("voices_Discount, \r\n            T.ExtendedPrice AS Invoices_ExtendedPrice, \r\n    ");
            viewString.Append("        T.Freight AS Invoices_Freight, \r\n            True AS _from0\r\n        FRO");
            viewString.Append("M EfObjectContextEdmgenEntities.Invoices AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Invoices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView37()
        {
            System.Text.StringBuilder viewString = new System.Text.StringBuilder(2101);
            viewString.Append("\r\n    SELECT VALUE -- Constructing Invoices\r\n        [OrmTestNorthwind.EfObjectC");
            viewString.Append("ontextEdmgen.Invoice](T1.Invoice_ShipName, T1.Invoice_ShipAddress, T1.Invoice_Sh");
            viewString.Append("ipCity, T1.Invoice_ShipRegion, T1.Invoice_ShipPostalCode, T1.Invoice_ShipCountry");
            viewString.Append(", T1.Invoice_CustomerID, T1.Invoice_CustomerName, T1.Invoice_Address, T1.Invoice");
            viewString.Append("_City, T1.Invoice_Region, T1.Invoice_PostalCode, T1.Invoice_Country, T1.Invoice_");
            viewString.Append("Salesperson, T1.Invoice_OrderID, T1.Invoice_OrderDate, T1.Invoice_RequiredDate, ");
            viewString.Append("T1.Invoice_ShippedDate, T1.Invoice_ShipperName, T1.Invoice_ProductID, T1.Invoice");
            viewString.Append("_ProductName, T1.Invoice_UnitPrice, T1.Invoice_Quantity, T1.Invoice_Discount, T1");
            viewString.Append(".Invoice_ExtendedPrice, T1.Invoice_Freight)\r\n    FROM (\r\n        SELECT \r\n      ");
            viewString.Append("      T.ShipName AS Invoice_ShipName, \r\n            T.ShipAddress AS Invoice_Shi");
            viewString.Append("pAddress, \r\n            T.ShipCity AS Invoice_ShipCity, \r\n            T.ShipRegi");
            viewString.Append("on AS Invoice_ShipRegion, \r\n            T.ShipPostalCode AS Invoice_ShipPostalCo");
            viewString.Append("de, \r\n            T.ShipCountry AS Invoice_ShipCountry, \r\n            T.Customer");
            viewString.Append("ID AS Invoice_CustomerID, \r\n            T.CustomerName AS Invoice_CustomerName, ");
            viewString.Append("\r\n            T.Address AS Invoice_Address, \r\n            T.City AS Invoice_City");
            viewString.Append(", \r\n            T.Region AS Invoice_Region, \r\n            T.PostalCode AS Invoic");
            viewString.Append("e_PostalCode, \r\n            T.Country AS Invoice_Country, \r\n            T.Salesp");
            viewString.Append("erson AS Invoice_Salesperson, \r\n            T.OrderID AS Invoice_OrderID, \r\n    ");
            viewString.Append("        T.OrderDate AS Invoice_OrderDate, \r\n            T.RequiredDate AS Invoic");
            viewString.Append("e_RequiredDate, \r\n            T.ShippedDate AS Invoice_ShippedDate, \r\n          ");
            viewString.Append("  T.ShipperName AS Invoice_ShipperName, \r\n            T.ProductID AS Invoice_Pro");
            viewString.Append("ductID, \r\n            T.ProductName AS Invoice_ProductName, \r\n            T.Unit");
            viewString.Append("Price AS Invoice_UnitPrice, \r\n            T.Quantity AS Invoice_Quantity, \r\n    ");
            viewString.Append("        T.Discount AS Invoice_Discount, \r\n            T.ExtendedPrice AS Invoice");
            viewString.Append("_ExtendedPrice, \r\n            T.Freight AS Invoice_Freight, \r\n            True A");
            viewString.Append("S _from0\r\n        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Invoi");
            viewString.Append("ces AS T\r\n    ) AS T1");
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Invoices", viewString.ToString());
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Details Extended
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView38()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Details Extended", @"
    SELECT VALUE -- Constructing Order Details Extended
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Order Details Extended](T1.[Order Details Extended_OrderID], T1.[Order Details Extended_ProductID], T1.[Order Details Extended_ProductName], T1.[Order Details Extended_UnitPrice], T1.[Order Details Extended_Quantity], T1.[Order Details Extended_Discount], T1.[Order Details Extended_ExtendedPrice])
    FROM (
        SELECT 
            T.OrderID AS [Order Details Extended_OrderID], 
            T.ProductID AS [Order Details Extended_ProductID], 
            T.ProductName AS [Order Details Extended_ProductName], 
            T.UnitPrice AS [Order Details Extended_UnitPrice], 
            T.Quantity AS [Order Details Extended_Quantity], 
            T.Discount AS [Order Details Extended_Discount], 
            T.ExtendedPrice AS [Order Details Extended_ExtendedPrice], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Order_Details_Extendeds AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Order_Details_Extendeds
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView39()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Order_Details_Extendeds", @"
    SELECT VALUE -- Constructing Order_Details_Extendeds
        [OrmTestNorthwind.EfObjectContextEdmgen.Order_Details_Extended](T1.[Order_Details_Extended.OrderID], T1.[Order_Details_Extended.ProductID], T1.[Order_Details_Extended.ProductName], T1.[Order_Details_Extended.UnitPrice], T1.[Order_Details_Extended.Quantity], T1.[Order_Details_Extended.Discount], T1.[Order_Details_Extended.ExtendedPrice])
    FROM (
        SELECT 
            T.OrderID AS [Order_Details_Extended.OrderID], 
            T.ProductID AS [Order_Details_Extended.ProductID], 
            T.ProductName AS [Order_Details_Extended.ProductName], 
            T.UnitPrice AS [Order_Details_Extended.UnitPrice], 
            T.Quantity AS [Order_Details_Extended.Quantity], 
            T.Discount AS [Order_Details_Extended.Discount], 
            T.ExtendedPrice AS [Order_Details_Extended.ExtendedPrice], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Order Details Extended] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Subtotals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView40()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Order Subtotals", @"
    SELECT VALUE -- Constructing Order Subtotals
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Order Subtotals](T1.[Order Subtotals_OrderID], T1.[Order Subtotals_Subtotal])
    FROM (
        SELECT 
            T.OrderID AS [Order Subtotals_OrderID], 
            T.Subtotal AS [Order Subtotals_Subtotal], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Order_Subtotals AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Order_Subtotals
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView41()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Order_Subtotals", @"
    SELECT VALUE -- Constructing Order_Subtotals
        [OrmTestNorthwind.EfObjectContextEdmgen.Order_Subtotal](T1.[Order_Subtotal.OrderID], T1.[Order_Subtotal.Subtotal])
    FROM (
        SELECT 
            T.OrderID AS [Order_Subtotal.OrderID], 
            T.Subtotal AS [Order_Subtotal.Subtotal], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Order Subtotals] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Orders Qry
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView42()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Orders Qry", "\r\n    SELECT VALUE -- Constructing Orders Qry\r\n        [OrmTestNorthwind.EfObject" +
                    "ContextEdmgen.Store.Orders Qry](T1.[Orders Qry_OrderID], T1.[Orders Qry_Customer" +
                    "ID], T1.[Orders Qry_EmployeeID], T1.[Orders Qry_OrderDate], T1.[Orders Qry_Requi" +
                    "redDate], T1.[Orders Qry_ShippedDate], T1.[Orders Qry_ShipVia], T1.[Orders Qry_F" +
                    "reight], T1.[Orders Qry_ShipName], T1.[Orders Qry_ShipAddress], T1.[Orders Qry_S" +
                    "hipCity], T1.[Orders Qry_ShipRegion], T1.[Orders Qry_ShipPostalCode], T1.[Orders" +
                    " Qry_ShipCountry], T1.[Orders Qry_CompanyName], T1.[Orders Qry_Address], T1.[Ord" +
                    "ers Qry_City], T1.[Orders Qry_Region], T1.[Orders Qry_PostalCode], T1.[Orders Qr" +
                    "y_Country])\r\n    FROM (\r\n        SELECT \r\n            T.OrderID AS [Orders Qry_O" +
                    "rderID], \r\n            T.CustomerID AS [Orders Qry_CustomerID], \r\n            T." +
                    "EmployeeID AS [Orders Qry_EmployeeID], \r\n            T.OrderDate AS [Orders Qry_" +
                    "OrderDate], \r\n            T.RequiredDate AS [Orders Qry_RequiredDate], \r\n       " +
                    "     T.ShippedDate AS [Orders Qry_ShippedDate], \r\n            T.ShipVia AS [Orde" +
                    "rs Qry_ShipVia], \r\n            T.Freight AS [Orders Qry_Freight], \r\n            " +
                    "T.ShipName AS [Orders Qry_ShipName], \r\n            T.ShipAddress AS [Orders Qry_" +
                    "ShipAddress], \r\n            T.ShipCity AS [Orders Qry_ShipCity], \r\n            T" +
                    ".ShipRegion AS [Orders Qry_ShipRegion], \r\n            T.ShipPostalCode AS [Order" +
                    "s Qry_ShipPostalCode], \r\n            T.ShipCountry AS [Orders Qry_ShipCountry], " +
                    "\r\n            T.CompanyName AS [Orders Qry_CompanyName], \r\n            T.Address" +
                    " AS [Orders Qry_Address], \r\n            T.City AS [Orders Qry_City], \r\n         " +
                    "   T.Region AS [Orders Qry_Region], \r\n            T.PostalCode AS [Orders Qry_Po" +
                    "stalCode], \r\n            T.Country AS [Orders Qry_Country], \r\n            True A" +
                    "S _from0\r\n        FROM EfObjectContextEdmgenEntities.Orders_Qries AS T\r\n    ) AS" +
                    " T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Orders_Qries
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView43()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Orders_Qries", "\r\n    SELECT VALUE -- Constructing Orders_Qries\r\n        [OrmTestNorthwind.EfObje" +
                    "ctContextEdmgen.Orders_Qry](T1.[Orders_Qry.OrderID], T1.[Orders_Qry.CustomerID]," +
                    " T1.[Orders_Qry.EmployeeID], T1.[Orders_Qry.OrderDate], T1.[Orders_Qry.RequiredD" +
                    "ate], T1.[Orders_Qry.ShippedDate], T1.[Orders_Qry.ShipVia], T1.[Orders_Qry.Freig" +
                    "ht], T1.[Orders_Qry.ShipName], T1.[Orders_Qry.ShipAddress], T1.[Orders_Qry.ShipC" +
                    "ity], T1.[Orders_Qry.ShipRegion], T1.[Orders_Qry.ShipPostalCode], T1.[Orders_Qry" +
                    ".ShipCountry], T1.[Orders_Qry.CompanyName], T1.[Orders_Qry.Address], T1.[Orders_" +
                    "Qry.City], T1.[Orders_Qry.Region], T1.[Orders_Qry.PostalCode], T1.[Orders_Qry.Co" +
                    "untry])\r\n    FROM (\r\n        SELECT \r\n            T.OrderID AS [Orders_Qry.Order" +
                    "ID], \r\n            T.CustomerID AS [Orders_Qry.CustomerID], \r\n            T.Empl" +
                    "oyeeID AS [Orders_Qry.EmployeeID], \r\n            T.OrderDate AS [Orders_Qry.Orde" +
                    "rDate], \r\n            T.RequiredDate AS [Orders_Qry.RequiredDate], \r\n           " +
                    " T.ShippedDate AS [Orders_Qry.ShippedDate], \r\n            T.ShipVia AS [Orders_Q" +
                    "ry.ShipVia], \r\n            T.Freight AS [Orders_Qry.Freight], \r\n            T.Sh" +
                    "ipName AS [Orders_Qry.ShipName], \r\n            T.ShipAddress AS [Orders_Qry.Ship" +
                    "Address], \r\n            T.ShipCity AS [Orders_Qry.ShipCity], \r\n            T.Shi" +
                    "pRegion AS [Orders_Qry.ShipRegion], \r\n            T.ShipPostalCode AS [Orders_Qr" +
                    "y.ShipPostalCode], \r\n            T.ShipCountry AS [Orders_Qry.ShipCountry], \r\n  " +
                    "          T.CompanyName AS [Orders_Qry.CompanyName], \r\n            T.Address AS " +
                    "[Orders_Qry.Address], \r\n            T.City AS [Orders_Qry.City], \r\n            T" +
                    ".Region AS [Orders_Qry.Region], \r\n            T.PostalCode AS [Orders_Qry.Postal" +
                    "Code], \r\n            T.Country AS [Orders_Qry.Country], \r\n            True AS _f" +
                    "rom0\r\n        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Orders Q" +
                    "ry] AS T\r\n    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Product Sales for 1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView44()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Product Sales for 1997", @"
    SELECT VALUE -- Constructing Product Sales for 1997
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Product Sales for 1997](T1.[Product Sales for 1997_CategoryName], T1.[Product Sales for 1997_ProductName], T1.[Product Sales for 1997_ProductSales])
    FROM (
        SELECT 
            T.CategoryName AS [Product Sales for 1997_CategoryName], 
            T.ProductName AS [Product Sales for 1997_ProductName], 
            T.ProductSales AS [Product Sales for 1997_ProductSales], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Product_Sales_for_1997 AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Product_Sales_for_1997
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView45()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Product_Sales_for_1997", @"
    SELECT VALUE -- Constructing Product_Sales_for_1997
        [OrmTestNorthwind.EfObjectContextEdmgen.Product_Sales_for_1997](T1.[Product_Sales_for_1997.CategoryName], T1.[Product_Sales_for_1997.ProductName], T1.[Product_Sales_for_1997.ProductSales])
    FROM (
        SELECT 
            T.CategoryName AS [Product_Sales_for_1997.CategoryName], 
            T.ProductName AS [Product_Sales_for_1997.ProductName], 
            T.ProductSales AS [Product_Sales_for_1997.ProductSales], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Product Sales for 1997] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products Above Average Price
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView46()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products Above Average Price", @"
    SELECT VALUE -- Constructing Products Above Average Price
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Products Above Average Price](T1.[Products Above Average Price_ProductName], T1.[Products Above Average Price_UnitPrice])
    FROM (
        SELECT 
            T.ProductName AS [Products Above Average Price_ProductName], 
            T.UnitPrice AS [Products Above Average Price_UnitPrice], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Products_Above_Average_Prices AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Products_Above_Average_Prices
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView47()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Products_Above_Average_Prices", @"
    SELECT VALUE -- Constructing Products_Above_Average_Prices
        [OrmTestNorthwind.EfObjectContextEdmgen.Products_Above_Average_Price](T1.[Products_Above_Average_Price.ProductName], T1.[Products_Above_Average_Price.UnitPrice])
    FROM (
        SELECT 
            T.ProductName AS [Products_Above_Average_Price.ProductName], 
            T.UnitPrice AS [Products_Above_Average_Price.UnitPrice], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Products Above Average Price] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products by Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView48()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Products by Category", @"
    SELECT VALUE -- Constructing Products by Category
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Products by Category](T1.[Products by Category_CategoryName], T1.[Products by Category_ProductName], T1.[Products by Category_QuantityPerUnit], T1.[Products by Category_UnitsInStock], T1.[Products by Category_Discontinued])
    FROM (
        SELECT 
            T.CategoryName AS [Products by Category_CategoryName], 
            T.ProductName AS [Products by Category_ProductName], 
            T.QuantityPerUnit AS [Products by Category_QuantityPerUnit], 
            T.UnitsInStock AS [Products by Category_UnitsInStock], 
            T.Discontinued AS [Products by Category_Discontinued], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Products_by_Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Products_by_Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView49()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Products_by_Categories", @"
    SELECT VALUE -- Constructing Products_by_Categories
        [OrmTestNorthwind.EfObjectContextEdmgen.Products_by_Category](T1.[Products_by_Category.CategoryName], T1.[Products_by_Category.ProductName], T1.[Products_by_Category.QuantityPerUnit], T1.[Products_by_Category.UnitsInStock], T1.[Products_by_Category.Discontinued])
    FROM (
        SELECT 
            T.CategoryName AS [Products_by_Category.CategoryName], 
            T.ProductName AS [Products_by_Category.ProductName], 
            T.QuantityPerUnit AS [Products_by_Category.QuantityPerUnit], 
            T.UnitsInStock AS [Products_by_Category.UnitsInStock], 
            T.Discontinued AS [Products_by_Category.Discontinued], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Products by Category] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Sales by Category
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView50()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Sales by Category", @"
    SELECT VALUE -- Constructing Sales by Category
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Sales by Category](T1.[Sales by Category_CategoryID], T1.[Sales by Category_CategoryName], T1.[Sales by Category_ProductName], T1.[Sales by Category_ProductSales])
    FROM (
        SELECT 
            T.CategoryID AS [Sales by Category_CategoryID], 
            T.CategoryName AS [Sales by Category_CategoryName], 
            T.ProductName AS [Sales by Category_ProductName], 
            T.ProductSales AS [Sales by Category_ProductSales], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Sales_by_Categories AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Sales_by_Categories
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView51()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Sales_by_Categories", @"
    SELECT VALUE -- Constructing Sales_by_Categories
        [OrmTestNorthwind.EfObjectContextEdmgen.Sales_by_Category](T1.[Sales_by_Category.CategoryID], T1.[Sales_by_Category.CategoryName], T1.[Sales_by_Category.ProductName], T1.[Sales_by_Category.ProductSales])
    FROM (
        SELECT 
            T.CategoryID AS [Sales_by_Category.CategoryID], 
            T.CategoryName AS [Sales_by_Category.CategoryName], 
            T.ProductName AS [Sales_by_Category.ProductName], 
            T.ProductSales AS [Sales_by_Category.ProductSales], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Sales by Category] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Sales Totals by Amount
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView52()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Sales Totals by Amount", @"
    SELECT VALUE -- Constructing Sales Totals by Amount
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Sales Totals by Amount](T1.[Sales Totals by Amount_SaleAmount], T1.[Sales Totals by Amount_OrderID], T1.[Sales Totals by Amount_CompanyName], T1.[Sales Totals by Amount_ShippedDate])
    FROM (
        SELECT 
            T.SaleAmount AS [Sales Totals by Amount_SaleAmount], 
            T.OrderID AS [Sales Totals by Amount_OrderID], 
            T.CompanyName AS [Sales Totals by Amount_CompanyName], 
            T.ShippedDate AS [Sales Totals by Amount_ShippedDate], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Sales_Totals_by_Amounts AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Sales_Totals_by_Amounts
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView53()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Sales_Totals_by_Amounts", @"
    SELECT VALUE -- Constructing Sales_Totals_by_Amounts
        [OrmTestNorthwind.EfObjectContextEdmgen.Sales_Totals_by_Amount](T1.[Sales_Totals_by_Amount.SaleAmount], T1.[Sales_Totals_by_Amount.OrderID], T1.[Sales_Totals_by_Amount.CompanyName], T1.[Sales_Totals_by_Amount.ShippedDate])
    FROM (
        SELECT 
            T.SaleAmount AS [Sales_Totals_by_Amount.SaleAmount], 
            T.OrderID AS [Sales_Totals_by_Amount.OrderID], 
            T.CompanyName AS [Sales_Totals_by_Amount.CompanyName], 
            T.ShippedDate AS [Sales_Totals_by_Amount.ShippedDate], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Sales Totals by Amount] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Summary of Sales by Quarter
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView54()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Summary of Sales by Quarter", @"
    SELECT VALUE -- Constructing Summary of Sales by Quarter
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Summary of Sales by Quarter](T1.[Summary of Sales by Quarter_ShippedDate], T1.[Summary of Sales by Quarter_OrderID], T1.[Summary of Sales by Quarter_Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary of Sales by Quarter_ShippedDate], 
            T.OrderID AS [Summary of Sales by Quarter_OrderID], 
            T.Subtotal AS [Summary of Sales by Quarter_Subtotal], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Summary_of_Sales_by_Quarters AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Summary_of_Sales_by_Quarters
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView55()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Summary_of_Sales_by_Quarters", @"
    SELECT VALUE -- Constructing Summary_of_Sales_by_Quarters
        [OrmTestNorthwind.EfObjectContextEdmgen.Summary_of_Sales_by_Quarter](T1.[Summary_of_Sales_by_Quarter.ShippedDate], T1.[Summary_of_Sales_by_Quarter.OrderID], T1.[Summary_of_Sales_by_Quarter.Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary_of_Sales_by_Quarter.ShippedDate], 
            T.OrderID AS [Summary_of_Sales_by_Quarter.OrderID], 
            T.Subtotal AS [Summary_of_Sales_by_Quarter.Subtotal], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Summary of Sales by Quarter] AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Summary of Sales by Year
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView56()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("OrmTestNorthwindEfObjectContextEdmgenStoreContainer.Summary of Sales by Year", @"
    SELECT VALUE -- Constructing Summary of Sales by Year
        [OrmTestNorthwind.EfObjectContextEdmgen.Store.Summary of Sales by Year](T1.[Summary of Sales by Year_ShippedDate], T1.[Summary of Sales by Year_OrderID], T1.[Summary of Sales by Year_Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary of Sales by Year_ShippedDate], 
            T.OrderID AS [Summary of Sales by Year_OrderID], 
            T.Subtotal AS [Summary of Sales by Year_Subtotal], 
            True AS _from0
        FROM EfObjectContextEdmgenEntities.Summary_of_Sales_by_Years AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// возвратить представление для EfObjectContextEdmgenEntities.Summary_of_Sales_by_Years
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView57()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("EfObjectContextEdmgenEntities.Summary_of_Sales_by_Years", @"
    SELECT VALUE -- Constructing Summary_of_Sales_by_Years
        [OrmTestNorthwind.EfObjectContextEdmgen.Summary_of_Sales_by_Year](T1.[Summary_of_Sales_by_Year.ShippedDate], T1.[Summary_of_Sales_by_Year.OrderID], T1.[Summary_of_Sales_by_Year.Subtotal])
    FROM (
        SELECT 
            T.ShippedDate AS [Summary_of_Sales_by_Year.ShippedDate], 
            T.OrderID AS [Summary_of_Sales_by_Year.OrderID], 
            T.Subtotal AS [Summary_of_Sales_by_Year.Subtotal], 
            True AS _from0
        FROM OrmTestNorthwindEfObjectContextEdmgenStoreContainer.[Summary of Sales by Year] AS T
    ) AS T1");
        }
    }
}
