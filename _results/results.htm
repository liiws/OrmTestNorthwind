<!DOCTYPE html>
<html>
<head>
</head>
<body>


<h2>
Entity Framework DbContext vs ObjectContext vs ADO.NET vs Business Logic Toolkit Performance
</h2>


<p>
Microsoft <a href="http://msdn.microsoft.com/en-us/data/jj613116.aspx">recommends</a> DbContext over ObjectContext for Entity Framework.
So let's compare its performance.
</p>

<p>
These tests was performed on C2D E4700, DDR800, Win 8.1 32 bit, SQL Server 2014, VS 2013, .NET 4.5, EF 6.1.1.
Default <a href="https://northwinddatabase.codeplex.com/">Northwind</a> database was used.
</p>

<p>
Tests include two different queries (simple, complex) and two lengths (10, 500 rows).
Simple query:
</p>

<p>
<code><pre>
SELECT TOP 10 O.OrderID, O.OrderDate, C.Country, C.CompanyName
FROM Orders O
JOIN Customers C ON O.CustomerID = C.CustomerID
</pre></code>
</p>

<p>
Complex query:
</p>

<p>
<code><pre>
SELECT TOP 10 OD.Quantity, OD.UnitPrice, OD.Discount, O.ShipCountry, S.Country
FROM Orders O
JOIN [Order Details] OD ON O.OrderID = OD.OrderID
JOIN Products P ON OD.ProductID = P.ProductID
JOIN Categories Cat ON P.CategoryID = Cat.CategoryID
JOIN Suppliers S ON P.SupplierID = S.SupplierID
WHERE
    Cat.CategoryID IN (@categoryIds)
    AND S.SupplierID IN (@supplierIds)
ORDER BY OD.Discount DESC
</pre></code>
</p>

<p>
There were 5 methods tested to work with database:
<ol>
	<li>DbContext CodeFirst (generated from DB)
	<li>DbContext Designer (generated from DB)
	<li>ObjectContext (generated from DB with EdmGen.exe)
	<li>ADO.NET
	<li>Business Logic Toolkit
</ol>
</p>

<p>
Each method was tested with 1000 iterations (100 iterations to warm up).
</p>

<p>
Since context initialization can't be measured directly, it was measured by the following way.
Let say we executed a query:
</p>

<p>
<code><pre>
using (var ctx = new MyContext())
{
    var list = ctx.Products.Where(r => r.Name.Length < 10).ToList();
}
</pre></code>
</p>

<p>
then if we executed this query twice:
</p>

<p>
<code><pre>
using (var ctx = new MyContext())
{
    var list = ctx.Products.Where(r => r.Name.Length < 10).ToList();
    var list2 = ctx.Products.Where(r => r.Name.Length < 10).ToList();
}
</pre></code>
</p>

<p>
we got a system of linear equations:
</p>

<p>
<code><pre>
q + ctx = x
2*q + ctx = y
</pre></code>
</p>

<p>
and now it's easy to find context initialization time:
</p>

<p>
<code><pre>
ctx = 2*x - y
</pre></code>
</p>

<p>
Context initialization was measured using "Simple TOP 10" query.
</p>

<p>
<img src="r/context-initialization.png" />
</p>

<p>
Context initialization for DbContext CodeFirst and Designer is nearly the same, while ObjectContext requires twice more time.
ADO.NET and BLToolkit have nearly the same minimum time, thrice lower than DbContext.
</p>

<p>
Simple TOP 10 query:
</p>

<p>
<img src="r/simple-top-10.png" />
</p>

<p>
For simple query with a few rows where request to database takes little time, EF query compilation takes almost all the time for DbContext and ObjectContext.
Precompiled ObjectContext and BLToolkit take slightly more time than ADO.NET.
DbContext <a href="http://blogs.msdn.com/b/adonet/archive/2011/03/02/ef-4-1-is-coming-dbcontext-api-amp-code-first-rtw.aspx">doesn't support precompiled queries</a> at all.
</p>

<p>
Simple TOP 500 query:
</p>

<p>
<img src="r/simple-top-500.png" />
</p>

<p>
Simple TOP 500 query takes more time to request data from database.
This is the reason why DbContext and ObjectContext takes only one third time more than ADO.NET, BLToolkit and precompiled ObjectContext query.
</p>

<p>
Complex TOP 10 query:
</p>

<p>
<img src="r/complex-top-10.png" />
</p>

<p>
Complex TOP 10 query has similar situation: EF query compilation time is comparable to query request to databse. This is why DbContext and ObjectContext takes only twice more time that ADO.NET and BLToolit.
</p>

<p>
Complex TOP 500 query:
</p>

<p>
<img src="r/complex-top-500.png" />
</p>

<p>
Complex TOP 500 query shows the same results as Complex TOP 10: time to request from database is comparable to compilation time,
therefore DbContext and ObjectContext take only twice more time that ADO.NET and BLToolit.
</p>

<p>
Conclusions.
</p>

<p>
<ul>
	<li>DbContext CodeFirst is slightly faster that DbContext Designer (both generated from database).
	<li>ObjectContext is a bit slower than DbContext, but some queries can be precompiled (<a href="http://stackoverflow.com/questions/813256/compiled-queries-and-parameters-cannot-be-sequences">Parameters cannot be sequences</a>).
	<li>BLToolkit doesn't provide compilation-time type checking, but it's fast nearly as ADO.NET and it has great mapping capabilities (<a href="http://liiws.bitbucket.org/bltoolkit.html">this article</a> is in Russian (<a href="http://bltoolkit.net/">main site</a> is down) but you can understand <a href="http://liiws.bitbucket.org/bltoolkit.html#intro">a bit</a> from <a href="http://liiws.bitbucket.org/bltoolkit.html#mappingmapper">code samples</a>).
</ul>
</p>





</body>
</html>